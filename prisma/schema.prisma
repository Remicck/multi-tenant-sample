// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

generator client {
  provider        = "prisma-client-js"
  // https://www.prisma.io/docs/orm/prisma-client/queries/full-text-search
  // "fullTextSearch"
  previewFeatures = ["tracing"]
}

generator erd {
  provider                  = "prisma-erd-generator"
  theme                     = "forest"
  output                    = "ERD.md"
  includeRelationFromFields = true
}

// https://next-auth.js.org/v3/adapters/prisma#setup
model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id") @db.Uuid
  type              String
  provider          String
  providerAccountId String   @map("provider_account_id")
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id") @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@map("sessions")
}

model User {
  id            String       @id @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
  name          String?
  email         String?      @unique
  emailVerified DateTime?    @map("email_verified")
  image         String?
  website       String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt @map("updated_at")
  // https://authjs.dev/guides/basics/role-based-access-control
  role          String?
  items         Item[]
  roles         TenantUser[] // 中間テーブルを通じてテナントとのリレーション

  @@map("users")
}

model Tenant {
  id           String        @id @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
  name         String        @unique // テナント名（会社名など）
  createdAt    DateTime      @default(now()) // 作成日時
  updatedAt    DateTime      @updatedAt // 更新日時
  isActive     Boolean       @default(true) // 有効/無効状態
  contactEmail String?       @unique // テナント管理者の連絡用メールアドレス
  subscription Subscription? // サブスクリプション情報（プランや状態）
  users        TenantUser[] // 中間テーブルを通じてユーザーとのリレーション

  @@map("tenants")
}

model TenantUser {
  id       String   @id @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
  tenantId String   @db.Uuid // テナントのID
  userId   String   @db.Uuid // ユーザーのID
  role     String // このテナントでの役割（例: "admin", "member"）
  joinedAt DateTime @default(now()) // このテナントに参加した日時

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([tenantId, userId]) // ユニーク制約: 同じユーザーが同じテナントに重複登録されない
  @@map("tenant_users") // テーブル名を指定
}

model Subscription {
  id        String    @id @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
  plan      String    @default("basic") // サブスクリプションプラン（例: "basic", "pro", "enterprise"）
  status    String // サブスクリプションの状態（例: "active", "canceled", "trialing"）
  startedAt DateTime // サブスクリプションの開始日時
  expiresAt DateTime? // サブスクリプションの終了日時（nullなら無期限）
  tenantId  String    @unique @db.Uuid // テナントのID
  tenant    Tenant    @relation(fields: [tenantId], references: [id])

  @@map("subscriptions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// example model
model Item {
  id        String   @id @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
  content   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @map("user_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("items")
}
